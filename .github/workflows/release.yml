name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

concurrency:
  group: release
  cancel-in-progress: false

env:
  NODE_VERSION: '18'
  DOTNET_VERSION: '8.0.x'

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for releasable changes
        id: check
        run: |
          # Check if there are any commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=0.1.0" >> $GITHUB_OUTPUT
          else
            COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)
            if [ "$COMMITS_SINCE_TAG" -gt 0 ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              # Calculate next version based on conventional commits
              NEXT_VERSION=$(npx semantic-release --dry-run --no-ci | grep "next release version is" | sed 's/.*next release version is //')
              echo "version=${NEXT_VERSION:-patch}" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  test:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - name: Lint
        run: npm run lint

  build-web:
    runs-on: ubuntu-latest
    needs: [check-changes, test]
    if: needs.check-changes.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build web dashboard
        run: npm run build --workspace=apps/web-dashboard
        env:
          NODE_ENV: production

      - name: Build marketing site
        run: npm run build --workspace=apps/marketing
        env:
          NODE_ENV: production

      - name: Upload web artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: |
            apps/web-dashboard/.next/
            apps/marketing/.next/
          retention-days: 30

  build-desktop:
    runs-on: windows-latest
    needs: [check-changes, test]
    if: needs.check-changes.outputs.should_release == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore apps/desktop/VoiceInputAssistant.csproj

      - name: Update version
        run: |
          $version = "${{ needs.check-changes.outputs.version }}"
          if ($version -eq "" -or $version -eq "patch") { $version = "0.1.0" }
          (Get-Content apps/desktop/VoiceInputAssistant.csproj) -replace '<Version>.*</Version>', "<Version>$version</Version>" | Set-Content apps/desktop/VoiceInputAssistant.csproj
        shell: powershell

      - name: Build and publish
        run: dotnet publish apps/desktop/VoiceInputAssistant.csproj --configuration Release --output ./publish --no-restore --self-contained false

      - name: Create portable build
        run: |
          Compress-Archive -Path ./publish/* -DestinationPath "VoiceInputAssistant-${{ needs.check-changes.outputs.version }}-portable.zip"
        shell: powershell

      - name: Upload desktop artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-build-${{ github.sha }}
          path: |
            VoiceInputAssistant-*.zip
            ./publish/
          retention-days: 30

  create-release:
    runs-on: ubuntu-latest
    needs: [check-changes, build-web, build-desktop]
    if: needs.check-changes.outputs.should_release == 'true'
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download desktop artifacts
        uses: actions/download-artifact@v4
        with:
          name: desktop-build-${{ github.sha }}
          path: ./release-assets/

      - name: Generate changelog
        id: changelog
        run: |
          npx conventional-changelog-cli -p angular -i CHANGELOG.md -s -r 0
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          npx conventional-changelog-cli -p angular -r 1 >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          VERSION=${{ needs.check-changes.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-changes.outputs.version }}
          name: Voice Input Assistant v${{ needs.check-changes.outputs.version }}
          body: |
            ${{ steps.changelog.outputs.changelog }}
            
            ## üì• Downloads
            
            ### Desktop Application (Windows)
            - **[VoiceInputAssistant-${{ needs.check-changes.outputs.version }}-portable.zip]** - Portable version (no installation required)
            
            ### Web Dashboard
            - Deploy the web dashboard to your preferred hosting platform using the build artifacts
            
            ## üöÄ Quick Start
            
            1. Download the portable version for Windows
            2. Extract the ZIP file 
            3. Run `VoiceInputAssistant.exe`
            4. Follow the setup wizard
            
            ## üìù Full Changelog
            
            https://github.com/${{ github.repository }}/compare/v${{ needs.check-changes.outputs.version }}...HEAD
          files: |
            ./release-assets/*.zip
          draft: false
          prerelease: ${{ contains(needs.check-changes.outputs.version, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}

  deploy-web-staging:
    runs-on: ubuntu-latest
    needs: [create-release]
    if: success() && !contains(needs.check-changes.outputs.version, '-')
    environment:
      name: staging
      url: https://staging.voiceinputassistant.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: ./build/

      - name: Deploy to staging
        run: |
          echo "Deploying web dashboard to staging environment..."
          echo "This would typically deploy to Vercel, Netlify, or your hosting platform"
          # Add actual deployment commands here

  deploy-web-production:
    runs-on: ubuntu-latest
    needs: [deploy-web-staging]
    if: success()
    environment:
      name: production
      url: https://voiceinputassistant.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download web artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-build-${{ github.sha }}
          path: ./build/

      - name: Deploy to production
        run: |
          echo "Deploying web dashboard to production environment..."
          echo "This would typically deploy to Vercel, Netlify, or your hosting platform"
          # Add actual deployment commands here

  notification:
    runs-on: ubuntu-latest
    needs: [create-release, deploy-web-production]
    if: always()
    steps:
      - name: Notify release completion
        run: |
          if [ "${{ needs.create-release.result }}" == "success" ]; then
            echo "‚úÖ Release v${{ needs.check-changes.outputs.version }} completed successfully!"
          else
            echo "‚ùå Release failed. Please check the logs."
          fi