name: Package Desktop App

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        default: '0.1.0'

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  package-msix:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Get version
        id: version
        run: |
          if ("${{ github.event_name }}" -eq "release") {
            $version = "${{ github.event.release.tag_name }}" -replace "^v", ""
          } else {
            $version = "${{ github.event.inputs.version }}"
          }
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "Version: $version"
        shell: powershell

      - name: Update manifest version
        run: |
          $version = "${{ steps.version.outputs.version }}"
          $manifestPath = "apps/desktop/Package.appxmanifest"
          $content = Get-Content $manifestPath -Raw
          $content = $content -replace 'Version="[\d\.]+', "Version=`"$version.0`""
          Set-Content $manifestPath $content
          
          # Also update csproj version
          $csprojPath = "apps/desktop/VoiceInputAssistant.csproj"
          $csprojContent = Get-Content $csprojPath -Raw
          $csprojContent = $csprojContent -replace '<Version>.*</Version>', "<Version>$version</Version>"
          $csprojContent = $csprojContent -replace '<ApplicationVersion>.*</ApplicationVersion>', "<ApplicationVersion>$version</ApplicationVersion>"
          Set-Content $csprojPath $csprojContent
        shell: powershell

      - name: Restore dependencies
        run: dotnet restore apps/desktop/VoiceInputAssistant.csproj

      - name: Create certificate for signing
        run: |
          # Create a self-signed certificate for development/testing
          # In production, you would use a real certificate
          $cert = New-SelfSignedCertificate -Type Custom -Subject "CN=Voice Input Assistant Team" -KeyUsage DigitalSignature -FriendlyName "Voice Input Assistant" -CertStoreLocation "Cert:\CurrentUser\My" -TextExtension @("2.5.29.37={text}1.3.6.1.5.5.7.3.3", "2.5.29.19={text}")
          $pwd = ConvertTo-SecureString -String "password123" -Force -AsPlainText
          Export-PfxCertificate -cert "Cert:\CurrentUser\My\$($cert.Thumbprint)" -FilePath "apps/desktop/VoiceInputAssistant_TemporaryKey.pfx" -Password $pwd
          echo "Certificate created and exported"
        shell: powershell

      - name: Build MSIX package
        run: |
          # Build the application first
          dotnet publish apps/desktop/VoiceInputAssistant.csproj -c Release -r win-x64 --self-contained false -o apps/desktop/bin/Release/net8.0-windows/win-x64/publish/
          
          # Create MSIX package using MSBuild
          msbuild apps/desktop/VoiceInputAssistant.csproj /p:Configuration=Release /p:Platform=x64 /p:UapAppxPackageBuildMode=StoreUpload /p:PackageCertificateKeyFile=VoiceInputAssistant_TemporaryKey.pfx /p:PackageCertificatePassword=password123
        shell: powershell

      - name: Create portable build
        run: |
          $version = "${{ steps.version.outputs.version }}"
          # Create portable ZIP from published files
          Compress-Archive -Path "apps/desktop/bin/Release/net8.0-windows/win-x64/publish/*" -DestinationPath "VoiceInputAssistant-$version-portable.zip"
          
          # Create installer using advanced options
          dotnet publish apps/desktop/VoiceInputAssistant.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o "installer-build"
          Compress-Archive -Path "installer-build/*" -DestinationPath "VoiceInputAssistant-$version-installer.zip"
        shell: powershell

      - name: Sign MSIX package (if certificate exists)
        run: |
          $msixPath = Get-ChildItem -Path "apps/desktop/bin" -Filter "*.msix" -Recurse | Select-Object -First 1
          if ($msixPath) {
            Write-Host "Found MSIX package: $($msixPath.FullName)"
            
            # Sign the package using signtool (requires Windows SDK)
            try {
              & "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64\signtool.exe" sign /f "apps/desktop/VoiceInputAssistant_TemporaryKey.pfx" /p "password123" /fd SHA256 $msixPath.FullName
              Write-Host "MSIX package signed successfully"
            } catch {
              Write-Warning "Failed to sign MSIX package: $($_.Exception.Message)"
            }
          } else {
            Write-Warning "No MSIX package found to sign"
          }
        shell: powershell

      - name: Upload MSIX artifacts
        uses: actions/upload-artifact@v4
        with:
          name: msix-package-${{ steps.version.outputs.version }}
          path: |
            apps/desktop/bin/**/*.msix
            apps/desktop/bin/**/*.msixbundle
            VoiceInputAssistant-*.zip
          retention-days: 90

      - name: Upload to GitHub Release (if release event)
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            apps/desktop/bin/**/*.msix
            VoiceInputAssistant-*.zip
          token: ${{ secrets.GITHUB_TOKEN }}

  submit-to-winget:
    runs-on: windows-latest
    needs: package-msix
    if: github.event_name == 'release' && !github.event.release.prerelease
    steps:
      - name: Checkout winget-pkgs repository
        uses: actions/checkout@v4
        with:
          repository: microsoft/winget-pkgs
          token: ${{ secrets.WINGET_TOKEN }}
          path: winget-pkgs

      - name: Get release info
        id: release
        run: |
          $version = "${{ github.event.release.tag_name }}" -replace "^v", ""
          $downloadUrl = "https://github.com/${{ github.repository }}/releases/download/${{ github.event.release.tag_name }}/VoiceInputAssistant-$version-portable.zip"
          
          echo "version=$version" >> $env:GITHUB_OUTPUT
          echo "download_url=$downloadUrl" >> $env:GITHUB_OUTPUT
        shell: powershell

      - name: Download release asset for hash calculation
        run: |
          $url = "${{ steps.release.outputs.download_url }}"
          $output = "VoiceInputAssistant.zip"
          Invoke-WebRequest -Uri $url -OutFile $output
          $hash = (Get-FileHash -Path $output -Algorithm SHA256).Hash
          echo "hash=$hash" >> $env:GITHUB_OUTPUT
        shell: powershell
        id: hash

      - name: Create winget manifest
        run: |
          $version = "${{ steps.release.outputs.version }}"
          $manifestDir = "winget-pkgs/manifests/v/VoiceInputAssistant/VoiceInputAssistant/$version"
          New-Item -ItemType Directory -Path $manifestDir -Force
          
          # Create version manifest
          $versionManifest = @"
          PackageIdentifier: VoiceInputAssistant.VoiceInputAssistant
          PackageVersion: $version
          DefaultLocale: en-US
          ManifestType: version
          ManifestVersion: 1.4.0
          "@
          
          # Create default locale manifest  
          $defaultLocaleManifest = @"
          PackageIdentifier: VoiceInputAssistant.VoiceInputAssistant
          PackageVersion: $version
          PackageLocale: en-US
          Publisher: Voice Input Assistant Team
          PublisherUrl: https://github.com/${{ github.repository }}
          PublisherSupportUrl: https://github.com/${{ github.repository }}/issues
          PackageName: Voice Input Assistant
          PackageUrl: https://github.com/${{ github.repository }}
          License: MIT
          LicenseUrl: https://github.com/${{ github.repository }}/blob/main/LICENSE
          ShortDescription: Revolutionary speech-to-text software that works anywhere on Windows
          Description: Voice Input Assistant is a comprehensive speech-to-text solution featuring multiple STT engines, AI-powered post-processing, and system-wide compatibility.
          Tags:
          - speech-to-text
          - voice-recognition
          - dictation
          - accessibility
          - ai
          ManifestType: defaultLocale
          ManifestVersion: 1.4.0
          "@
          
          # Create installer manifest
          $installerManifest = @"
          PackageIdentifier: VoiceInputAssistant.VoiceInputAssistant
          PackageVersion: $version
          MinimumOSVersion: 10.0.19041.0
          Installers:
          - Architecture: x64
            InstallerType: zip
            InstallerUrl: ${{ steps.release.outputs.download_url }}
            InstallerSha256: ${{ steps.hash.outputs.hash }}
            NestedInstallerType: portable
            NestedInstallerFiles:
            - RelativeFilePath: VoiceInputAssistant.exe
              PortableCommandAlias: voice-input-assistant
          ManifestType: installer
          ManifestVersion: 1.4.0
          "@
          
          Set-Content -Path "$manifestDir/VoiceInputAssistant.yaml" -Value $versionManifest
          Set-Content -Path "$manifestDir/VoiceInputAssistant.locale.en-US.yaml" -Value $defaultLocaleManifest
          Set-Content -Path "$manifestDir/VoiceInputAssistant.installer.yaml" -Value $installerManifest
          
          Write-Host "Winget manifests created in $manifestDir"
        shell: powershell

      - name: Create Pull Request to winget-pkgs
        run: |
          cd winget-pkgs
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          $version = "${{ steps.release.outputs.version }}"
          git checkout -b "voiceinputassistant-$version"
          git add .
          git commit -m "Add VoiceInputAssistant version $version"
          git push origin "voiceinputassistant-$version"
          
          # Create PR using GitHub CLI
          gh pr create --title "Add VoiceInputAssistant $version" --body "Automated PR for Voice Input Assistant version $version" --repo microsoft/winget-pkgs
        shell: powershell
        env:
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}