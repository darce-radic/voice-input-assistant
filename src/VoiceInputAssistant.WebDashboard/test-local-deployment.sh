#!/bin/bash

# Voice Input Assistant - Local Test Deployment Script
# Comprehensive local testing before production deployment

echo "ðŸ§ª Voice Input Assistant - Local Test Deployment"
echo "================================================"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
TEST_PORT=3000
TEST_HTTPS_PORT=3443
BUILD_PORT=5000
PWA_TEST_PORT=8080

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${CYAN}[TEST]${NC} $1"
}

# Function to check if port is available
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1  # Port is in use
    else
        return 0  # Port is free
    fi
}

# Function to kill process on port
kill_port() {
    local port=$1
    print_status "Killing any processes on port $port..."
    
    if command -v lsof &> /dev/null; then
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
    elif command -v netstat &> /dev/null; then
        netstat -tulpn | grep :$port | awk '{print $7}' | cut -d/ -f1 | xargs kill -9 2>/dev/null || true
    fi
    
    sleep 2
}

# Function to wait for service to be ready
wait_for_service() {
    local url=$1
    local max_attempts=30
    local attempt=1
    
    print_status "Waiting for service at $url..."
    
    while [ $attempt -le $max_attempts ]; do
        if curl -f -s $url > /dev/null 2>&1; then
            print_success "Service is ready!"
            return 0
        fi
        
        echo -n "."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    print_error "Service failed to start after $max_attempts attempts"
    return 1
}

# Pre-test setup
setup_test_environment() {
    print_header "Setting up test environment..."
    
    # Check Node.js version
    NODE_VERSION=$(node --version)
    print_status "Node.js version: $NODE_VERSION"
    
    # Check npm version
    NPM_VERSION=$(npm --version)
    print_status "npm version: v$NPM_VERSION"
    
    # Kill any existing processes on test ports
    kill_port $TEST_PORT
    kill_port $TEST_HTTPS_PORT
    kill_port $BUILD_PORT
    kill_port $PWA_TEST_PORT
    
    # Create test logs directory
    mkdir -p test-logs
    
    print_success "Test environment ready"
}

# Test 1: Dependencies and Environment
test_dependencies() {
    print_header "Test 1: Dependencies and Environment"
    
    # Check if package.json exists
    if [ ! -f "package.json" ]; then
        print_error "package.json not found"
        return 1
    fi
    print_success "package.json found"
    
    # Check if node_modules exists
    if [ ! -d "node_modules" ]; then
        print_status "Installing dependencies..."
        npm install
        if [ $? -eq 0 ]; then
            print_success "Dependencies installed"
        else
            print_error "Failed to install dependencies"
            return 1
        fi
    else
        print_success "node_modules found"
    fi
    
    # Check critical dependencies
    critical_deps=("react" "react-scripts" "typescript")
    for dep in "${critical_deps[@]}"; do
        if npm list $dep &> /dev/null; then
            print_success "âœ“ $dep installed"
        else
            print_error "âœ— $dep missing"
            return 1
        fi
    done
    
    # Check environment file
    if [ -f ".env" ]; then
        print_success "Environment file found"
    else
        print_warning "No .env file found, creating basic one..."
        cat > .env << EOF
NODE_ENV=development
REACT_APP_ENV=development
GENERATE_SOURCEMAP=true
REACT_APP_MOCK_API=true
REACT_APP_DEBUG_MODE=true
REACT_APP_BASE_URL=http://localhost:$TEST_PORT
EOF
        print_success "Basic .env file created"
    fi
    
    print_success "Dependencies test passed âœ“"
}

# Test 2: TypeScript and Linting
test_code_quality() {
    print_header "Test 2: Code Quality Checks"
    
    # TypeScript type checking
    print_status "Running TypeScript type checking..."
    if npm run type-check > test-logs/typecheck.log 2>&1; then
        print_success "TypeScript type checking passed âœ“"
    else
        print_warning "TypeScript issues found (see test-logs/typecheck.log)"
        tail -10 test-logs/typecheck.log
    fi
    
    # ESLint
    print_status "Running ESLint..."
    if npm run lint > test-logs/lint.log 2>&1; then
        print_success "ESLint checks passed âœ“"
    else
        print_warning "ESLint issues found (see test-logs/lint.log)"
        tail -10 test-logs/lint.log
    fi
    
    print_success "Code quality test completed âœ“"
}

# Test 3: Development Server
test_development_server() {
    print_header "Test 3: Development Server"
    
    print_status "Starting development server on port $TEST_PORT..."
    
    # Start development server in background
    npm start > test-logs/dev-server.log 2>&1 &
    DEV_PID=$!
    
    # Wait for server to be ready
    if wait_for_service "http://localhost:$TEST_PORT"; then
        print_success "Development server started successfully âœ“"
        
        # Test basic endpoints
        print_status "Testing development server endpoints..."
        
        # Test root endpoint
        if curl -f -s "http://localhost:$TEST_PORT" | grep -q "Voice Input Assistant\|react"; then
            print_success "âœ“ Root endpoint responding"
        else
            print_warning "âœ— Root endpoint not responding as expected"
        fi
        
        # Test static assets
        if curl -f -s "http://localhost:$TEST_PORT/static/js/" &> /dev/null; then
            print_success "âœ“ Static assets accessible"
        else
            print_warning "âœ— Static assets not accessible"
        fi
        
        # Test hot reloading (make a small change)
        print_status "Testing hot reload functionality..."
        if [ -f "src/App.tsx" ]; then
            # Backup original
            cp src/App.tsx src/App.tsx.bak
            
            # Make a small change
            echo "// Hot reload test comment" >> src/App.tsx
            sleep 3
            
            # Restore original
            mv src/App.tsx.bak src/App.tsx
            print_success "âœ“ Hot reload test completed"
        fi
        
    else
        print_error "Development server failed to start"
        kill $DEV_PID 2>/dev/null
        return 1
    fi
    
    # Clean up
    kill $DEV_PID 2>/dev/null
    sleep 2
    
    print_success "Development server test passed âœ“"
}

# Test 4: Production Build
test_production_build() {
    print_header "Test 4: Production Build"
    
    print_status "Building production version..."
    
    # Clean previous build
    if [ -d "build" ]; then
        rm -rf build
        print_status "Cleaned previous build"
    fi
    
    # Build production version
    if npm run build > test-logs/build.log 2>&1; then
        print_success "Production build completed âœ“"
        
        # Check build directory
        if [ -d "build" ]; then
            print_success "âœ“ Build directory created"
            
            # Check critical files
            critical_files=("build/index.html" "build/static/js" "build/static/css")
            for file in "${critical_files[@]}"; do
                if [ -e "$file" ]; then
                    print_success "âœ“ $file exists"
                else
                    print_error "âœ— $file missing"
                fi
            done
            
            # Check build size
            BUILD_SIZE=$(du -sh build/ | cut -f1)
            print_status "Build size: $BUILD_SIZE"
            
            # Check for service worker
            if [ -f "build/sw.js" ]; then
                print_success "âœ“ Service worker generated"
            elif [ -f "build/service-worker.js" ]; then
                print_success "âœ“ Service worker generated"
            else
                print_warning "âœ— Service worker not found"
            fi
            
            # Check for PWA manifest
            if [ -f "build/manifest.json" ]; then
                print_success "âœ“ PWA manifest generated"
            else
                print_warning "âœ— PWA manifest not found"
            fi
            
        else
            print_error "Build directory not created"
            return 1
        fi
        
    else
        print_error "Production build failed"
        tail -20 test-logs/build.log
        return 1
    fi
    
    print_success "Production build test passed âœ“"
}

# Test 5: Production Server
test_production_server() {
    print_header "Test 5: Production Server"
    
    print_status "Starting production server on port $BUILD_PORT..."
    
    # Install serve if not available
    if ! command -v serve &> /dev/null; then
        if ! npm list -g serve &> /dev/null; then
            print_status "Installing serve globally..."
            npm install -g serve
        fi
    fi
    
    # Start production server in background
    serve -s build -l $BUILD_PORT > test-logs/prod-server.log 2>&1 &
    PROD_PID=$!
    
    # Wait for server to be ready
    if wait_for_service "http://localhost:$BUILD_PORT"; then
        print_success "Production server started successfully âœ“"
        
        # Test production endpoints
        print_status "Testing production server..."
        
        # Test root endpoint
        if curl -f -s "http://localhost:$BUILD_PORT" | grep -q "Voice Input Assistant\|react"; then
            print_success "âœ“ Production app loading"
        else
            print_warning "âœ— Production app not loading properly"
        fi
        
        # Test static files
        if curl -f -s "http://localhost:$BUILD_PORT/static/js/" &> /dev/null; then
            print_success "âœ“ Static files serving"
        else
            print_warning "âœ— Static files not serving"
        fi
        
        # Test SPA routing (should return index.html for unknown routes)
        if curl -f -s "http://localhost:$BUILD_PORT/nonexistent-route" | grep -q "Voice Input Assistant\|react"; then
            print_success "âœ“ SPA routing working"
        else
            print_warning "âœ— SPA routing not working"
        fi
        
        # Test service worker
        if curl -f -s "http://localhost:$BUILD_PORT/sw.js" &> /dev/null || curl -f -s "http://localhost:$BUILD_PORT/service-worker.js" &> /dev/null; then
            print_success "âœ“ Service worker accessible"
        else
            print_warning "âœ— Service worker not accessible"
        fi
        
        # Test PWA manifest
        if curl -f -s "http://localhost:$BUILD_PORT/manifest.json" &> /dev/null; then
            print_success "âœ“ PWA manifest accessible"
        else
            print_warning "âœ— PWA manifest not accessible"
        fi
        
    else
        print_error "Production server failed to start"
        kill $PROD_PID 2>/dev/null
        return 1
    fi
    
    # Clean up
    kill $PROD_PID 2>/dev/null
    sleep 2
    
    print_success "Production server test passed âœ“"
}

# Test 6: HTTPS Development Server
test_https_server() {
    print_header "Test 6: HTTPS Development Server (PWA Testing)"
    
    print_status "Testing HTTPS development server..."
    
    # Check if mkcert is available for HTTPS certificates
    if command -v mkcert &> /dev/null; then
        print_status "mkcert found, generating certificates..."
        mkcert -install 2>/dev/null || true
        mkcert localhost 127.0.0.1 ::1 2>/dev/null || true
        
        if [ -f "localhost.pem" ] && [ -f "localhost-key.pem" ]; then
            print_success "âœ“ SSL certificates generated"
            
            # Start HTTPS server
            HTTPS=true SSL_CRT_FILE=localhost.pem SSL_KEY_FILE=localhost-key.pem npm start > test-logs/https-server.log 2>&1 &
            HTTPS_PID=$!
            
            # Wait for HTTPS server
            if wait_for_service "https://localhost:$TEST_HTTPS_PORT"; then
                print_success "âœ“ HTTPS server started"
                
                # Test HTTPS endpoint (skip certificate verification for testing)
                if curl -k -f -s "https://localhost:$TEST_HTTPS_PORT" | grep -q "Voice Input Assistant\|react"; then
                    print_success "âœ“ HTTPS endpoint responding"
                else
                    print_warning "âœ— HTTPS endpoint not responding"
                fi
                
            else
                print_warning "âœ— HTTPS server failed to start"
            fi
            
            # Clean up
            kill $HTTPS_PID 2>/dev/null
            rm -f localhost.pem localhost-key.pem
            
        else
            print_warning "SSL certificate generation failed"
        fi
    else
        print_warning "mkcert not available, skipping HTTPS test"
        print_status "Install mkcert for HTTPS testing: https://github.com/FiloSottile/mkcert"
    fi
    
    print_success "HTTPS server test completed âœ“"
}

# Test 7: PWA Functionality
test_pwa_functionality() {
    print_header "Test 7: PWA Functionality"
    
    print_status "Testing PWA features..."
    
    # Start PWA test server
    npm run pwa-test > test-logs/pwa-test.log 2>&1 &
    PWA_PID=$!
    
    # Wait for PWA server
    if wait_for_service "http://localhost:3000"; then
        print_success "âœ“ PWA test server started"
        
        # Test PWA manifest
        if curl -f -s "http://localhost:3000/manifest.json" | jq . > /dev/null 2>&1; then
            print_success "âœ“ PWA manifest is valid JSON"
            
            # Check manifest contents
            MANIFEST_CONTENT=$(curl -s "http://localhost:3000/manifest.json")
            if echo "$MANIFEST_CONTENT" | grep -q "name\|short_name\|start_url"; then
                print_success "âœ“ PWA manifest has required fields"
            else
                print_warning "âœ— PWA manifest missing required fields"
            fi
        else
            print_warning "âœ— PWA manifest invalid or missing"
        fi
        
        # Test service worker
        if curl -f -s "http://localhost:3000/sw.js" &> /dev/null || curl -f -s "http://localhost:3000/service-worker.js" &> /dev/null; then
            print_success "âœ“ Service worker available"
        else
            print_warning "âœ— Service worker not available"
        fi
        
        # Test icons
        ICON_SIZES=("192" "512")
        for size in "${ICON_SIZES[@]}"; do
            if curl -f -s "http://localhost:3000/logo${size}.png" &> /dev/null || \
               curl -f -s "http://localhost:3000/icon-${size}x${size}.png" &> /dev/null; then
                print_success "âœ“ PWA icon ${size}x${size} available"
            else
                print_warning "âœ— PWA icon ${size}x${size} missing"
            fi
        done
        
    else
        print_warning "âœ— PWA test server failed to start"
    fi
    
    # Clean up
    kill $PWA_PID 2>/dev/null
    
    print_success "PWA functionality test completed âœ“"
}

# Test 8: Performance and Bundle Analysis
test_performance() {
    print_header "Test 8: Performance and Bundle Analysis"
    
    print_status "Analyzing bundle size..."
    
    if [ -d "build/static/js" ]; then
        JS_FILES=$(find build/static/js -name "*.js" ! -name "*.map")
        TOTAL_JS_SIZE=0
        
        for file in $JS_FILES; do
            if [ -f "$file" ]; then
                SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
                SIZE_KB=$((SIZE / 1024))
                TOTAL_JS_SIZE=$((TOTAL_JS_SIZE + SIZE_KB))
                
                if [ $SIZE_KB -gt 500 ]; then
                    print_warning "Large JS file: $(basename $file) (${SIZE_KB}KB)"
                else
                    print_success "âœ“ $(basename $file) (${SIZE_KB}KB)"
                fi
            fi
        done
        
        print_status "Total JS bundle size: ${TOTAL_JS_SIZE}KB"
        
        if [ $TOTAL_JS_SIZE -gt 1000 ]; then
            print_warning "Bundle size is large (>${TOTAL_JS_SIZE}KB). Consider code splitting."
        else
            print_success "âœ“ Bundle size is reasonable (${TOTAL_JS_SIZE}KB)"
        fi
    fi
    
    # Check CSS files
    if [ -d "build/static/css" ]; then
        CSS_FILES=$(find build/static/css -name "*.css" ! -name "*.map")
        TOTAL_CSS_SIZE=0
        
        for file in $CSS_FILES; do
            if [ -f "$file" ]; then
                SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
                SIZE_KB=$((SIZE / 1024))
                TOTAL_CSS_SIZE=$((TOTAL_CSS_SIZE + SIZE_KB))
                print_success "âœ“ $(basename $file) (${SIZE_KB}KB)"
            fi
        done
        
        print_status "Total CSS size: ${TOTAL_CSS_SIZE}KB"
    fi
    
    print_success "Performance analysis completed âœ“"
}

# Test 9: Docker Build (if Docker is available)
test_docker_build() {
    print_header "Test 9: Docker Build (Optional)"
    
    if command -v docker &> /dev/null; then
        print_status "Docker found, testing containerization..."
        
        # Test Railway Dockerfile if it exists
        if [ -f "Dockerfile.railway" ]; then
            print_status "Testing Railway Dockerfile..."
            
            # Build Docker image
            if docker build -f Dockerfile.railway -t voice-assistant-test . > test-logs/docker-build.log 2>&1; then
                print_success "âœ“ Docker image built successfully"
                
                # Test running the container
                docker run -d -p 8081:3000 --name voice-assistant-test voice-assistant-test > test-logs/docker-run.log 2>&1
                
                if wait_for_service "http://localhost:8081"; then
                    print_success "âœ“ Docker container running successfully"
                    
                    # Test Docker endpoint
                    if curl -f -s "http://localhost:8081" | grep -q "Voice Input Assistant\|react"; then
                        print_success "âœ“ Dockerized app responding"
                    else
                        print_warning "âœ— Dockerized app not responding correctly"
                    fi
                else
                    print_warning "âœ— Docker container failed to start"
                fi
                
                # Clean up Docker container and image
                docker stop voice-assistant-test &> /dev/null || true
                docker rm voice-assistant-test &> /dev/null || true
                docker rmi voice-assistant-test &> /dev/null || true
                
            else
                print_warning "âœ— Docker build failed"
                tail -10 test-logs/docker-build.log
            fi
        else
            print_status "No Dockerfile.railway found, skipping Docker test"
        fi
    else
        print_status "Docker not available, skipping containerization test"
    fi
    
    print_success "Docker test completed âœ“"
}

# Generate test report
generate_test_report() {
    print_header "Generating Test Report"
    
    REPORT_FILE="test-report-$(date +%Y%m%d-%H%M%S).md"
    
    cat > "$REPORT_FILE" << EOF
# Voice Input Assistant - Local Test Report

**Test Date:** $(date)
**Node.js Version:** $(node --version)
**npm Version:** v$(npm --version)

## Test Results Summary

EOF
    
    # Add test results to report
    if [ -f "test-logs/typecheck.log" ]; then
        echo "### TypeScript Type Checking" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -20 test-logs/typecheck.log >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    if [ -f "test-logs/lint.log" ]; then
        echo "### ESLint Results" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -20 test-logs/lint.log >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    if [ -f "test-logs/build.log" ]; then
        echo "### Build Output" >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        tail -20 test-logs/build.log >> "$REPORT_FILE"
        echo "\`\`\`" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    # Add build size information
    if [ -d "build" ]; then
        echo "### Build Analysis" >> "$REPORT_FILE"
        echo "- **Build Size:** $(du -sh build/ | cut -f1)" >> "$REPORT_FILE"
        echo "- **Files:** $(find build -type f | wc -l) files" >> "$REPORT_FILE"
        echo "" >> "$REPORT_FILE"
    fi
    
    echo "## Recommendations" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo "1. âœ… All core functionality tested locally" >> "$REPORT_FILE"
    echo "2. ðŸ”§ Review any warnings above before production deployment" >> "$REPORT_FILE"
    echo "3. ðŸš€ Ready for Railway deployment: \`npm run railway-deploy\`" >> "$REPORT_FILE"
    echo "4. ðŸ’» Ready for Windows app build: \`npm run dist\`" >> "$REPORT_FILE"
    
    print_success "Test report generated: $REPORT_FILE"
}

# Cleanup function
cleanup() {
    print_status "Cleaning up test processes..."
    
    # Kill any remaining background processes
    jobs -p | xargs -r kill 2>/dev/null || true
    
    # Clean up specific processes if they're still running
    kill_port $TEST_PORT
    kill_port $TEST_HTTPS_PORT
    kill_port $BUILD_PORT
    kill_port $PWA_TEST_PORT
    kill_port 8081  # Docker test port
    
    print_success "Cleanup completed"
}

# Main test execution
main() {
    echo ""
    print_status "Starting comprehensive local deployment tests..."
    echo ""
    
    # Setup
    setup_test_environment
    
    # Run tests
    test_dependencies || exit 1
    test_code_quality
    test_development_server || exit 1
    test_production_build || exit 1
    test_production_server || exit 1
    test_https_server
    test_pwa_functionality
    test_performance
    test_docker_build
    
    # Generate report
    generate_test_report
    
    # Final summary
    echo ""
    print_success "ðŸŽ‰ Local deployment tests completed!"
    echo ""
    echo -e "${CYAN}Summary:${NC}"
    echo "â€¢ âœ… Development server working"
    echo "â€¢ âœ… Production build successful"
    echo "â€¢ âœ… Production server working"
    echo "â€¢ âœ… PWA features functional"
    echo "â€¢ âœ… Performance analyzed"
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo "â€¢ Deploy to Railway: npm run railway-deploy"
    echo "â€¢ Build Windows app: npm run dist"
    echo "â€¢ Check test report: $(ls test-report-*.md | tail -1)"
    echo ""
    
    # Cleanup
    cleanup
}

# Handle script interruption
trap cleanup EXIT INT TERM

# Handle command line arguments
case "$1" in
    "help"|"--help"|"-h")
        echo "Voice Input Assistant - Local Test Deployment"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  help    Show this help message"
        echo "  clean   Clean up test artifacts"
        echo ""
        echo "This script tests:"
        echo "â€¢ Dependencies and environment"
        echo "â€¢ Code quality (TypeScript, ESLint)"
        echo "â€¢ Development server"
        echo "â€¢ Production build"
        echo "â€¢ Production server"
        echo "â€¢ HTTPS server (if mkcert available)"
        echo "â€¢ PWA functionality"
        echo "â€¢ Performance and bundle analysis"
        echo "â€¢ Docker build (if Docker available)"
        exit 0
        ;;
    "clean")
        print_status "Cleaning test artifacts..."
        rm -rf test-logs/ test-report-*.md build/
        cleanup
        print_success "Test artifacts cleaned"
        exit 0
        ;;
esac

# Run main function
main