#!/bin/bash

# Voice Input Assistant - Railway Deployment Script
# Complete deployment automation for Railway platform

echo "üöÄ Voice Input Assistant - Railway Deployment"
echo "============================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="voice-input-assistant"
SERVICE_NAME="voice-input-assistant-web"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_header() {
    echo -e "${CYAN}[DEPLOY]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    print_header "Checking Prerequisites"
    
    # Check Node.js
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_success "Node.js found: $NODE_VERSION"
    else
        print_error "Node.js not found. Please install Node.js 16+"
        exit 1
    fi
    
    # Check npm
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        print_success "npm found: v$NPM_VERSION"
    else
        print_error "npm not found. Please install npm"
        exit 1
    fi
    
    # Check project files
    if [ -f "package.json" ]; then
        print_success "package.json found"
    else
        print_error "package.json not found. Are you in the correct directory?"
        exit 1
    fi
    
    print_success "Prerequisites check passed ‚úì"
}

# Install Railway CLI
install_railway_cli() {
    print_header "Installing Railway CLI"
    
    if command -v railway &> /dev/null; then
        RAILWAY_VERSION=$(railway --version)
        print_success "Railway CLI already installed: $RAILWAY_VERSION"
        return 0
    fi
    
    print_status "Installing Railway CLI..."
    
    # Try different installation methods
    if command -v curl &> /dev/null; then
        curl -fsSL https://railway.app/install.sh | sh
    elif command -v wget &> /dev/null; then
        wget -qO- https://railway.app/install.sh | sh
    elif command -v npm &> /dev/null; then
        npm install -g @railway/cli
    else
        print_error "Could not install Railway CLI. Please install manually."
        print_status "Visit: https://docs.railway.app/quick-start"
        exit 1
    fi
    
    # Add to PATH if needed
    export PATH="$HOME/.railway/bin:$PATH"
    
    if command -v railway &> /dev/null; then
        print_success "Railway CLI installed successfully"
    else
        print_warning "Railway CLI installation may need manual PATH setup"
        print_status "Add this to your ~/.bashrc or ~/.zshrc:"
        print_status 'export PATH="$HOME/.railway/bin:$PATH"'
    fi
}

# Build the application
build_application() {
    print_header "Building Application"
    
    # Clean previous build
    if [ -d "build" ]; then
        print_status "Cleaning previous build..."
        rm -rf build/
    fi
    
    # Install dependencies if needed
    if [ ! -d "node_modules" ]; then
        print_status "Installing dependencies..."
        npm install
        if [ $? -ne 0 ]; then
            print_error "Failed to install dependencies"
            exit 1
        fi
    fi
    
    # Run production build
    print_status "Running production build..."
    npm run build
    
    if [ $? -eq 0 ] && [ -d "build" ]; then
        BUILD_SIZE=$(du -sh build/ | cut -f1)
        print_success "Build completed successfully (${BUILD_SIZE})"
        
        # Verify critical files
        if [ -f "build/index.html" ]; then
            print_success "‚úì index.html generated"
        else
            print_error "‚úó index.html missing"
            exit 1
        fi
        
        if [ -d "build/static" ]; then
            print_success "‚úì Static assets generated"
        else
            print_warning "‚úó Static assets directory missing"
        fi
        
    else
        print_error "Build failed"
        exit 1
    fi
}

# Setup Railway project
setup_railway_project() {
    print_header "Setting up Railway Project"
    
    # Login check
    print_status "Checking Railway authentication..."
    railway whoami &> /dev/null
    if [ $? -ne 0 ]; then
        print_warning "Not logged in to Railway"
        print_status "Please login to Railway:"
        railway login
        if [ $? -ne 0 ]; then
            print_error "Failed to login to Railway"
            exit 1
        fi
    else
        print_success "Already logged in to Railway"
    fi
    
    # Initialize project if needed
    if [ ! -f "railway.toml" ] && [ ! -f ".railway" ]; then
        print_status "Initializing Railway project..."
        railway init --name "$PROJECT_NAME"
        if [ $? -ne 0 ]; then
            print_error "Failed to initialize Railway project"
            exit 1
        fi
    else
        print_success "Railway project already initialized"
    fi
}

# Deploy to Railway
deploy_to_railway() {
    print_header "Deploying to Railway"
    
    print_status "Starting Railway deployment..."
    
    # Set environment variables
    print_status "Setting production environment variables..."
    railway variables set NODE_ENV=production
    railway variables set REACT_APP_ENV=production
    railway variables set GENERATE_SOURCEMAP=false
    railway variables set CI=false
    
    # Deploy the application
    print_status "Deploying application..."
    railway up --detach
    
    if [ $? -eq 0 ]; then
        print_success "Deployment initiated successfully!"
        
        # Wait for deployment to complete
        print_status "Waiting for deployment to complete..."
        sleep 10
        
        # Get deployment URL
        DEPLOY_URL=$(railway domain 2>/dev/null || echo "Deployment URL not available yet")
        
        if [ "$DEPLOY_URL" != "Deployment URL not available yet" ]; then
            print_success "üåê Application deployed at: $DEPLOY_URL"
        else
            print_warning "Deployment URL not available yet. Check Railway dashboard."
        fi
        
    else
        print_error "Deployment failed"
        exit 1
    fi
}

# Test deployment
test_deployment() {
    print_header "Testing Deployment"
    
    # Get the deployment URL
    DEPLOY_URL=$(railway domain 2>/dev/null)
    
    if [ -n "$DEPLOY_URL" ]; then
        print_status "Testing deployed application at $DEPLOY_URL..."
        
        # Test if the site is responding
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" 2>/dev/null || echo "000")
        
        if [ "$HTTP_STATUS" = "200" ]; then
            print_success "‚úÖ Deployment is live and responding!"
            print_success "üåê Visit your app: $DEPLOY_URL"
        elif [ "$HTTP_STATUS" = "000" ]; then
            print_warning "‚ö†Ô∏è Could not test deployment (network issue)"
            print_status "Please check manually: $DEPLOY_URL"
        else
            print_warning "‚ö†Ô∏è Deployment responding with HTTP $HTTP_STATUS"
            print_status "This might be normal during initial startup"
        fi
    else
        print_warning "Could not retrieve deployment URL"
        print_status "Check Railway dashboard for deployment status"
    fi
}

# Generate deployment report
generate_deployment_report() {
    print_header "Generating Deployment Report"
    
    REPORT_FILE="railway-deployment-$(date +%Y%m%d-%H%M%S).md"
    DEPLOY_URL=$(railway domain 2>/dev/null || echo "URL not available")
    
    cat > "$REPORT_FILE" << EOF
# Railway Deployment Report - Voice Input Assistant

**Deployment Date:** $(date)
**Project:** $PROJECT_NAME
**Service:** $SERVICE_NAME

## Deployment Summary

‚úÖ **Status:** Successfully deployed to Railway
üåê **URL:** $DEPLOY_URL
üì¶ **Build Size:** $(du -sh build/ 2>/dev/null | cut -f1 || echo "N/A")

## Configuration

- **Node.js:** $(node --version)
- **npm:** v$(npm --version)
- **Environment:** Production
- **Build Tool:** React Scripts + CRACO
- **Deployment:** Railway Platform

## Features Deployed

‚úÖ Progressive Web App (PWA)
‚úÖ Service Worker for offline functionality
‚úÖ Responsive design
‚úÖ Voice recognition capabilities
‚úÖ Material-UI components
‚úÖ Real-time analytics
‚úÖ gRPC Web API integration

## Performance Metrics

- **Bundle optimization:** Enabled
- **Source maps:** Disabled (production)
- **Compression:** Enabled via Railway
- **CDN:** Railway global CDN
- **SSL:** Automatic HTTPS

## Next Steps

1. **Custom Domain:** Configure custom domain in Railway dashboard
2. **Environment Variables:** Set production API endpoints
3. **Monitoring:** Setup error tracking and analytics
4. **Testing:** Perform user acceptance testing
5. **Launch:** Ready for production traffic!

## Support

- **Railway Dashboard:** https://railway.app/dashboard
- **Project Logs:** \`railway logs\`
- **Redeploy:** \`railway up\`

---

**Deployment completed successfully!** üéâ
EOF
    
    print_success "Deployment report generated: $REPORT_FILE"
}

# Main deployment flow
main() {
    print_status "Starting Railway deployment process..."
    echo ""
    
    # Run deployment steps
    check_prerequisites
    install_railway_cli
    build_application
    setup_railway_project
    deploy_to_railway
    test_deployment
    generate_deployment_report
    
    # Final success message
    echo ""
    print_success "üéâ Railway Deployment Completed Successfully!"
    echo ""
    echo -e "${CYAN}Summary:${NC}"
    echo "‚Ä¢ ‚úÖ Application built and optimized"
    echo "‚Ä¢ ‚úÖ Railway project configured"
    echo "‚Ä¢ ‚úÖ Production deployment live"
    echo "‚Ä¢ ‚úÖ PWA features enabled"
    echo ""
    
    DEPLOY_URL=$(railway domain 2>/dev/null)
    if [ -n "$DEPLOY_URL" ]; then
        echo -e "${CYAN}üåê Your Voice Input Assistant is live at:${NC}"
        echo -e "${GREEN}$DEPLOY_URL${NC}"
    fi
    echo ""
    echo -e "${CYAN}Next steps:${NC}"
    echo "‚Ä¢ Test all functionality on the live site"
    echo "‚Ä¢ Configure custom domain (optional)"
    echo "‚Ä¢ Setup monitoring and analytics"
    echo "‚Ä¢ Share with users!"
    echo ""
}

# Handle script interruption
cleanup() {
    print_status "Deployment interrupted. Cleaning up..."
    # Add any cleanup tasks here
    exit 1
}

trap cleanup INT TERM

# Handle command line arguments
case "$1" in
    "help"|"--help"|"-h")
        echo "Voice Input Assistant - Railway Deployment"
        echo ""
        echo "Usage: $0 [options]"
        echo ""
        echo "Options:"
        echo "  help    Show this help message"
        echo "  test    Test deployment without deploying"
        echo ""
        echo "This script will:"
        echo "‚Ä¢ Install Railway CLI if needed"
        echo "‚Ä¢ Build the React application"
        echo "‚Ä¢ Setup Railway project"
        echo "‚Ä¢ Deploy to Railway platform"
        echo "‚Ä¢ Test the deployment"
        echo "‚Ä¢ Generate deployment report"
        exit 0
        ;;
    "test")
        echo "Testing deployment readiness..."
        check_prerequisites
        build_application
        echo "‚úÖ Ready for Railway deployment!"
        exit 0
        ;;
esac

# Run main deployment
main