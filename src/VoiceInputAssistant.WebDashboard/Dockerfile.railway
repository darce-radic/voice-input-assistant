# Railway Optimized Dockerfile for Voice Input Assistant
# Lightweight multi-stage build optimized for Railway deployment

# Stage 1: Build the React application
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with optimizations for Railway
RUN npm ci --only=production --silent && npm cache clean --force

# Copy source code
COPY . .

# Set Railway-specific build environment variables
ARG RAILWAY_ENVIRONMENT_NAME=production
ARG RAILWAY_PROJECT_NAME=voice-input-assistant
ARG RAILWAY_DEPLOYMENT_ID

ENV NODE_ENV=production
ENV REACT_APP_ENV=${RAILWAY_ENVIRONMENT_NAME}
ENV REACT_APP_RAILWAY_PROJECT=${RAILWAY_PROJECT_NAME}
ENV REACT_APP_DEPLOYMENT_ID=${RAILWAY_DEPLOYMENT_ID}
ENV GENERATE_SOURCEMAP=false
ENV INLINE_RUNTIME_CHUNK=false

# Build the application
RUN npm run build

# Stage 2: Serve with nginx
FROM nginx:1.25-alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy custom nginx configuration
COPY <<EOF /etc/nginx/conf.d/default.conf
server {
    listen \$PORT default_server;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript application/wasm;
    gzip_min_length 1000;
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    
    # PWA and service worker headers
    location /sw.js {
        add_header Cache-Control "no-cache";
        add_header Service-Worker-Allowed "/";
    }
    
    location /manifest.json {
        add_header Cache-Control "public, max-age=31536000";
    }
    
    # Static assets caching
    location /static/ {
        add_header Cache-Control "public, max-age=31536000, immutable";
    }
    
    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Handle client-side routing
    location / {
        try_files \$uri \$uri/ /index.html;
        add_header Cache-Control "no-cache";
    }
    
    # Error pages
    error_page 404 /index.html;
}
EOF

# Copy built application from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Create non-root user
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chown -R nginx:nginx /var/log/nginx

# Use environment variable for port (Railway requirement)
ENV PORT=3000
EXPOSE $PORT

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=10s --retries=3 \
  CMD curl -f http://localhost:$PORT/health || exit 1

# Start nginx
CMD ["sh", "-c", "nginx -g 'daemon off;'"]